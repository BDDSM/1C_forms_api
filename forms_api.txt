
#Область Переменные
Перем мФорма;
Перем мЭтоУправляемаяФорма;
Перем мРодитель;
Перем мТекущаяСтраница;
Перем мПрефиксИмен;
Перем мГруппировка;
Перем мИменованыеСтили;
Перем мФормаПанели;

Перем мСтильЭлемент;
Перем мСтильКнопка;
Перем мСтильКоманда;
Перем мСтильДекорация;
Перем мСтильГруппа;
Перем мСтильПоле;

Перем мСтильПолеВвода;
Перем мСтильПолеВводаНадпись;
Перем мСтильНадпись;
Перем мСтильРамка;
Перем мСтильФлажок;

#Если ТолстыйКлиентОбычноеПриложение Тогда
Перем мДеревоСЭлементамиФормы;
//Перем мЛево Экспорт;
//Перем мВерх Экспорт;
Перем мЗазор Экспорт;
//Перем мПоле Экспорт;
Перем мШирина Экспорт;
Перем мВысота Экспорт;
Перем мВысотаПанели Экспорт;
Перем мЕстьРамка Экспорт;
Перем мОтступ Экспорт;
Перем мПривязки Экспорт;

Перем мТекущийЭлемент Экспорт;
Перем мЛевоТекущий Экспорт;
Перем мВерхТекущий Экспорт;
Перем мШиринаТекущий Экспорт;
Перем мВысотаТекущий Экспорт;

Перем мЛевоБаза Экспорт;

#КонецЕсли
#КонецОбласти

Функция Инициализация(пФорма, пПрефиксИмен = "") Экспорт
	
	Если НЕ Свойства_ЭтоКоллекция(мИменованыеСтили) Тогда
		мИменованыеСтили = Свойства_Новый();
	КонецЕсли;
	
	мФорма = пФорма;
	мФормаПанели = Новый Соответствие;
	мЭтоУправляемаяФорма = ТипЗнч(пФорма) = Тип("УправляемаяФорма");
	мПрефиксИмен = пПрефиксИмен;
	мГруппировка = "Вертикально";
	
	Если мЭтоУправляемаяФорма Тогда
		_Стиль("Группа", "Вид:ВидГруппыФормы.ОбычнаяГруппа; Отображение:ОтображениеОбычнойГруппы.Нет; ОтображатьЗаголовок:Ложь;");
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		//мПоле = 5;
		мЗазор = 5;
		мОтступ = 0;
		мЕстьРамка = Истина;
		мВысота = 19;
		мПривязки = Истина;
		
		мЛевоБаза = мЗазор;
		мЛевоТекущий = 0;
		мВерхТекущий = 0;
		мВысотаТекущий = 0;
		мШиринаТекущий = 0;
		
		Если ТипЗнч(мФорма) = Тип("Форма") Тогда
			//мФорма.Ширина = 350;
			мРодитель = мФорма.Панель;
			мВысотаПанели = мФорма.Высота - мВерхТекущий - ?(мЕстьРамка, 2, 0) - мЗазор - мЗазор;
			мШирина = мФорма.Ширина;
			мДеревоСЭлементамиФормы = ПолучитьДеревоЭлементовФормы(мФорма);
		КонецЕсли;
		
		_Стиль("ПолеВвода", "КнопкаВыбора:Да; КнопкаОчистки:Да;");
		//_Стиль("ПолеВводаНадпись", "Рамка:""Одинарная"";");
		#КонецЕсли
	КонецЕсли;
	
	
КонецФункции

Функция Завершить() Экспорт
	
	Если НЕ мЭтоУправляемаяФорма Тогда
		Для каждого Элем Из мФормаПанели Цикл
			Если мФорма.Панель = Элем.Ключ Тогда
				мФорма.Панель.ТекущаяСтраница = Элем.Значение;
			Иначе
				Элем.Ключ.ТекущаяСтраница = Элем.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

#Область Конструкторы

#Если ТолстыйКлиентОбычноеПриложение Тогда

#Область КонструкторыОбычные

Функция _Группировка(пЗначение) Экспорт
	
	Если Лев(пЗначение, 1) = "-" Тогда
		пЗначение = Сред(пЗначение, 2);
		мГруппировка = "Горизонтально";
		
	ИначеЕсли пЗначение = "Горизонтально" Тогда
		мГруппировка = "Горизонтально";
		
	ИначеЕсли Лев(пЗначение, 1) = "|" Тогда
		пЗначение = Сред(пЗначение, 2);
		мГруппировка = "Вертикально";
		
	Иначе
		мГруппировка = "Вертикально";
		
	КонецЕсли;
	
КонецФункции

Функция _Отступ(пРазмер, пНаправление = "|") Экспорт
	
	Если пНаправление = "-" Тогда
		мЛевоТекущий = мЛевоТекущий + пРазмер - мЗазор;
	Иначе
		мВерхТекущий = мВерхТекущий + пРазмер - мЗазор;
	КонецЕсли;
	
КонецФункции

Функция _Панель(пИмя, пИмяСтраницы = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено) Экспорт
	
	Если пИмя = "Форма.Панель" Тогда
		мРодитель = мФорма.Панель;
		мВысотаПанели = мФорма.Высота - мВерхТекущий - ?(мЕстьРамка, 2, 0) - мЗазор - мЗазор;
		мШирина = мФорма.Ширина;
		Если НЕ пИмяСтраницы = Неопределено Тогда
			_Страница(пИмяСтраницы, ?(пЗаголовок = Неопределено, пИмяСтраницы, пЗаголовок));
		КонецЕсли;
		Возврат мРодитель;
	КонецЕсли;
	
	_НовыйЭлемент = мФорма.ЭлементыФормы.Найти(пИмя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		_НовыйЭлемент = мФорма.ЭлементыФормы.Добавить(Тип("Панель"), пИмя, Истина, мРодитель);
		_НовыйЭлемент.Лево = мЛевоТекущий;
		_НовыйЭлемент.Верх = мВерхТекущий;
		_НовыйЭлемент.Ширина = ?(мРодитель = мФорма.Панель, мФорма.Ширина, мРодитель.Ширина) - мЛевоТекущий - мЗазор;
		_НовыйЭлемент.Высота = ?(мРодитель = мФорма.Панель, мФорма.Высота, мРодитель.Высота - 20) - мВерхТекущий - мЗазор;
		
		Если мПривязки Тогда
			_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, мРодитель, ГраницаЭлементаУправления.Лево);
			_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, мРодитель, ГраницаЭлементаУправления.Право);
			_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх, мРодитель, ГраницаЭлементаУправления.Верх);
			_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ, мРодитель, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ пСтиль = Неопределено Тогда
		_Стиль = _Стиль_Получить(пСтиль);
		__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, ,"Заголовок,Значение,КартинкаЗаголовка,Раскрыта");
		_Стиль_Применить(_НовыйЭлемент, __Стиль);
	КонецЕсли;
	
	мШирина = _НовыйЭлемент.Ширина - мЗазор - мЗазор - ?(мЕстьРамка, 2, 0);
	
	мВысотаПанели = _НовыйЭлемент.Высота - мЗазор - ?(мЕстьРамка, 2, 0);
	мВысотаПанели = мВысотаПанели - ?(Найти(_НовыйЭлемент.ОтображениеЗакладок, "Сверху")=1 ИЛИ Найти(_НовыйЭлемент.ОтображениеЗакладок, "Снизу")=1, 24, 0);
	
	мРодитель = _НовыйЭлемент;
	
	Если НЕ пИмяСтраницы = Неопределено Тогда
		__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, "Видимость,Доступность,Заголовок,Значение,Имя,КартинкаЗаголовка,Раскрыта");
		_Страница(пИмяСтраницы, ?(пЗаголовок = Неопределено, пИмяСтраницы, пЗаголовок), __Стиль);
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ПанельСбросить() Экспорт
	
	Возврат _Панель("Форма.Панель");
	
КонецФункции

Функция _Страница(пИмя, пЗаголовок = Неопределено, пСтиль = Неопределено) Экспорт
	
	Если мФормаПанели.Получить(мРодитель) = Неопределено Тогда
		мФормаПанели.Вставить(мРодитель, мРодитель.ТекущаяСтраница);
	КонецЕсли;
	
	Если мРодитель.Страницы.Найти(пИмя) = Неопределено Тогда
		
		_Имя = ?(Найти(пИмя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
		
		Если мРодитель.ТекущаяСтраница.Имя = "" Тогда
			_НовыйЭлемент = мРодитель.ТекущаяСтраница;
			_НовыйЭлемент.Имя = _Имя;
		Иначе
			_НовыйЭлемент = мРодитель.Страницы.Добавить(_Имя);
		КонецЕсли;
		
		Если НЕ пЗаголовок = Неопределено Тогда
			_НовыйЭлемент.Заголовок = пЗаголовок;
		КонецЕсли;
		
		_Стиль_Применить(_НовыйЭлемент, пСтиль);
		
		//мРодитель.ТекущаяСтраница = _НовыйЭлемент;
		мТекущаяСтраница = _Имя;
		
		мЛевоБаза = мЗазор;
		мЛевоТекущий = 0;
		мВерхТекущий = 0;
		мВысотаТекущий = 0;
		мШиринаТекущий = 0;
		
	Иначе
		
		//мРодитель.ТекущаяСтраница = мРодитель.Страницы[пИмя];
		мТекущаяСтраница = пИмя;
		
		_ТекущаяСтраница = мРодитель.ТекущаяСтраница;
		
		мРодитель.ТекущаяСтраница = мРодитель.Страницы[мТекущаяСтраница];
		
		ВстатьНаСвободноеМесто(мРодитель);
		
		мРодитель.ТекущаяСтраница = _ТекущаяСтраница;
		
	КонецЕсли;
	
	Возврат мРодитель.ТекущаяСтраница;
	
КонецФункции

Функция _ПолеВводаОФ(пИмя, пДанные = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	Перем _Заголовок;
	Перем _Надпись;
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("ПолеВвода", пИмя);
	
	_Результат = _НовыйЭлемент;
	
	Если пДанные = "" Тогда
		//пропускаем
	ИначеЕсли пДанные = Неопределено Тогда
		_НовыйЭлемент.Данные = пИмя;
	Иначе
		_НовыйЭлемент.Данные = пДанные;
	КонецЕсли;
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_Стиль = _Стиль_Получить(пСтиль);
	__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, ,"БегущаяСтрока,Гиперссылка,Заголовок,ПоложениеЗаголовка,ПоложениеКартинкиНадписи,РазмерКартинки,ЦветТекста,ЦветФона,ШиринаНадписи");
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильПолеВвода);
	_Стиль_Применить(_НовыйЭлемент, __Стиль);
	
	Если пЗаголовок = Неопределено Тогда
		_Заголовок = СинонимПоИмени(пИмя);
	Иначе
		_Заголовок = пЗаголовок;
	КонецЕсли;
	
	Если НЕ _Заголовок = "" Тогда
		
		//_Заголовок = ?(пЗаголовок = Неопределено, _Заголовок, пЗаголовок)+":";
		_Заголовок = _Заголовок + ":";
		
		__Стиль = Свойства_Заполнить(_Стиль_Получить(мСтильПолеВводаНадпись), _Стиль, "БегущаяСтрока,ВертикальноеПоложение,ВыделятьОтрицательные,Гиперссылка,ГоризонтальноеПоложение,Доступность,Заголовок,Картинка,Подсказка,ПоложениеКартинкиНадписи,ПрозрачныйФон,РазмерКартинки,Рамка,СочетаниеКлавиш,Формат,ЦветРамки,ЦветТекста,ЦветФона,Шрифт", "ПоложениеЗаголовка, ШиринаНадписи");
		
		_Надпись = _НадписьОФ(_НовыйЭлемент.Имя, _Заголовок);
		
		_Надпись_Ширина = Цел(_НовыйЭлемент.Ширина * 0.4);
		_Надпись_Ширина = Свойства_Получить(_Стиль, "ШиринаНадписи", _Надпись_Ширина);
		_Надпись.Ширина = ?(_Надпись_Ширина > 150, 150, ?(_Надпись_Ширина < 45, 45, _Надпись_Ширина));
		_Надпись.Высота = _НовыйЭлемент.Высота;
		
		Если мПривязки Тогда
			_Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, _НовыйЭлемент, ГраницаЭлементаУправления.Лево);
			_Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, _НовыйЭлемент, ГраницаЭлементаУправления.Лево);
		КонецЕсли;
		
		_Надпись_Положение = Свойства_Получить(_Стиль, "ПоложениеЗаголовка", "Лево");
		Если _Надпись_Положение = "Лево" Тогда
			ИзменитьРазмер(_НовыйЭлемент, -_Надпись.Ширина - мОтступ, "Право");
			ПоставитьРядомСЭлементом(_Надпись, _НовыйЭлемент, "Лево", мОтступ);
		ИначеЕсли _Надпись_Положение = "Право" Тогда
			ИзменитьРазмер(_НовыйЭлемент, -_Надпись.Ширина - мОтступ, "Лево");
			ПоставитьРядомСЭлементом(_Надпись, _НовыйЭлемент, "Право", мОтступ);
		ИначеЕсли _Надпись_Положение = "Верх" Тогда
			ПоставитьРядомСЭлементом(_Надпись, _НовыйЭлемент);
			ПоставитьРядомСЭлементом(_НовыйЭлемент, _Надпись, "Низ", мОтступ, Истина);
		ИначеЕсли _Надпись_Положение = "Низ" Тогда
			ПоставитьРядомСЭлементом(_Надпись, _НовыйЭлемент, "Низ", мОтступ, Истина);
		КонецЕсли;
		
		_Стиль_Применить(_НовыйЭлемент, __Стиль);
		
		//_Результат = Новый Массив();
		//_Результат.Добавить(_НовыйЭлемент);
		//_Результат.Добавить(_Надпись);
		
	КонецЕсли;
	
	МестоположениеЭлемента(_НовыйЭлемент, _Надпись);
	
	Возврат _Результат;
	
КонецФункции

Функция _НадписьОФ(пИмя = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("Надпись", ?(пИмя = Неопределено, ПолучитьУникальноеИмя(), пИмя), пЗаголовок, "Надпись");
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильНадпись);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	МестоположениеЭлемента(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _КнопкаОФ(пИмя, пДействие = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	Если пЗаголовок = Неопределено Тогда
		_Заголовок = СинонимПоИмени(пИмя);
	Иначе
		_Заголовок = пЗаголовок;
	КонецЕсли;
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("Кнопка", пИмя, пЗаголовок);
	
	//Если НЕ пДействие = Неопределено Тогда
	//	_НовыйЭлемент.УстановитьДействие("Нажатие", Новый Действие(пДействие));
	//КонецЕсли;
	
	Если пДействие = "" Тогда
		//пропускаем
	ИначеЕсли пДействие = Неопределено Тогда
		_НовыйЭлемент.УстановитьДействие("Нажатие", Новый Действие(пИмя));
	Иначе
		_НовыйЭлемент.УстановитьДействие("Нажатие", Новый Действие(пДействие));
	КонецЕсли;
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильКнопка);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	МестоположениеЭлемента(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _КнопкаКП(пПуть, пИмя, пДействие = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено) Экспорт
	
	_Путь = кпс._СтрРазделить(пПуть, ".");
	
	Если _Путь.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_Корень = мФорма.ЭлементыФормы[_Путь[0]];
	
	_Путь.Удалить(0);
	
	Для каждого _элем Из _Путь Цикл
		_Корень = _Корень.Кнопки[_элем];
	КонецЦикла;
	
	_Имя = ПрефиксИмя(пИмя);
	
	Если пДействие = Неопределено Тогда
		_Действие = Новый Действие(_Имя);
	Иначе
		_Действие = Новый Действие(пДействие);
	КонецЕсли;
	
	Если пЗаголовок = Неопределено Тогда
		_Заголовок = СинонимПоИмени(пИмя);
	Иначе
		_Заголовок = пЗаголовок;
	КонецЕсли;
	
	Если _Корень.Кнопки.Найти(_Имя) = Неопределено Тогда
		_Корень.Кнопки.Добавить();
		_НовыйЭлемент = _Корень.Кнопки.Добавить(_Имя, ТипКнопкиКоманднойПанели.Действие, _Заголовок, _Действие);
		_НовыйЭлемент.Подсказка = _Заголовок;
		_НовыйЭлемент.Пояснение = _Заголовок;
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Рамка(пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("РамкаГруппы", ПолучитьУникальноеИмя(), пЗаголовок);
	_НовыйЭлемент.ЦветТекста = ЦветаСтиля.ЦветРамки;
	_НовыйЭлемент.ЦветРамки  = ЦветаСтиля.ЦветРамки;
	_НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильРамка);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	МестоположениеЭлемента(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ФлажокОФ(пИмя, пДанные = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	Если пЗаголовок = Неопределено Тогда
		_Заголовок = СинонимПоИмени(пИмя);
	Иначе
		_Заголовок = пЗаголовок;
	КонецЕсли;
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("Флажок", пИмя, _Заголовок);
	
	//_НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСлева;
	
	Если пДанные = "" Тогда
		//пропускаем
	ИначеЕсли пДанные = Неопределено Тогда
		_НовыйЭлемент.Данные = пИмя;
	Иначе
		_НовыйЭлемент.Данные = пДанные;
	КонецЕсли;
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, _НовыйЭлемент, ГраницаЭлементаУправления.Лево);
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильФлажок);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	МестоположениеЭлемента(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ТабличноеПоле(пИмя, пДанные = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пРазмещение = Неопределено) Экспорт
	
	_НовыйЭлемент = ЭлементыФормы_Добавить("ТабличноеПоле", пИмя);
	
	_НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветРамки;
	
	Если пРазмещение = Неопределено Тогда
		УстановитьПоложениеЭлемента(_НовыйЭлемент);
	Иначе
		Размещение_Применить(_НовыйЭлемент, пРазмещение);
	КонецЕсли;
	
	_НовыйЭлемент.Высота = ?(мВысотаПанели < 24, 24, мВысотаПанели);
	
	Если мПривязки Тогда
		_НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ, мРодитель, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
	Если пДанные = "" Тогда
		//пропускаем
	ИначеЕсли пДанные = Неопределено Тогда
		_НовыйЭлемент.Данные = пИмя;
	Иначе
		_НовыйЭлемент.Данные = пДанные;
	КонецЕсли;
	
	_Стиль = _Стиль_Получить(пСтиль);
	__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль,"АвтоВводНовойСтроки,ВертикальнаяПолосаПрокрутки,ВертикальныеЛинии,Вывод,ВыделенныеСтроки,ВысотаПодвала,ВысотаШапки,ГоризонтальнаяПолосаПрокрутки,ГоризонтальныеЛинии,Доступность,ИзменятьНастройкуКолонок,ИзменятьПозициюКолонок,ИзменятьСоставСтрок,НачальноеОтображениеДерева,НачальноеОтображениеСписка,Подвал,Подсказка,РазрешитьНачалоПеретаскивания,РазрешитьПеретаскивание,Рамка,РежимВводаСтрок,РежимВыбора,РежимВыделения,РежимВыделенияСтроки,ТекущаяКолонка,ТекущаяСтрока,ТекущиеДанные,ТекущийРодитель,ТолькоПросмотр,ФиксацияСлева,ФиксацияСправа,ЦветРамки,ЦветТекстаВыделения,ЦветТекстаПодвала,ЦветТекстаШапки,ЦветФонаВыделения,ЦветФонаПодвала,ЦветФонаПоля,ЦветФонаЧередованияСтрок,ЦветФонаШапки,ЧередованиеЦветовСтрок,Шапка,Шрифт,ШрифтПодвала,ШрифтШапки");
	_Стиль_Применить(_НовыйЭлемент, __Стиль);
	
	_НовыйЭлемент.СоздатьКолонки();
	
	//удалим лишние колонки, если нужные указаны
	_Колонки = Неопределено;
	Если Свойства_Свойство(_Стиль, "Колонки", _Колонки) Тогда
		Если ТипЗнч(_Колонки) = Тип("Массив") Тогда
			//_Колонки = _Колонки;
		Иначе
			_Колонки = кпс._СтрРазделить(Строка(_Колонки), ",");
		КонецЕсли;
		
		Индекс = 0;
		Пока Индекс < _НовыйЭлемент.Колонки.Количество() Цикл
			
			Колонка = _НовыйЭлемент.Колонки.Получить(Индекс);
			
			Если _Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				_НовыйЭлемент.Колонки.Удалить(Колонка);
			Иначе
				Индекс = Индекс + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//по умолчанию добавляем
	//сырой и упрощенный вариант
	//панель сверху
	Если НЕ Свойства_Свойство(_Стиль, "КоманднаяПанель") Тогда
		_КоманднаяПанель = ЭлементыФормы_Добавить("КоманднаяПанель", "кп" + пИмя);
		
		_КоманднаяПанель.ИсточникДействий = _НовыйЭлемент;
		
		_КоманднаяПанель.АвтоЗаполнение = Истина;
		
		ИзменитьРазмер(_НовыйЭлемент, мЗазор, "Верх");//смещение вверх, срезаем отступ
		
		ИзменитьРазмер(_НовыйЭлемент, -24, "Низ");
		
		ПоставитьРядомСЭлементом(_КоманднаяПанель, _НовыйЭлемент, "Верх");
		
	КонецЕсли;

	МестоположениеЭлемента(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _НастроитьКолонки(пТабличноеПоле, пСтиль, пСоздавать = Истина) Экспорт
	
	_Стиль = _Стиль_Получить(пСтиль);
	
	Для каждого _КолонкаСвойства Из _Стиль Цикл
		
		_КолонкаИмя = СвойстваСтрока_Имя(_КолонкаСвойства);
		_КолонкаЗначение = СвойстваСтрока_Значение(_КолонкаСвойства);
		
		_тпКолонка = пТабличноеПоле.Колонки.Найти(_КолонкаИмя);
		
		Если пСоздавать = Истина И _тпКолонка = Неопределено Тогда
			_тпКолонка = пТабличноеПоле.Колонки.Добавить(_КолонкаИмя);
		КонецЕсли;
		
		Если _тпКолонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Свойства_ЭтоКоллекция(_КолонкаЗначение) Тогда
			Для каждого _КолонкаСвойство Из _КолонкаЗначение Цикл
				_КолонкаСвойствоИмя = СвойстваСтрока_Имя(_КолонкаСвойство);
				_КолонкаСвойствоЗначение = СвойстваСтрока_Значение(_КолонкаСвойство);
				
				Если _КолонкаСвойствоИмя = "ЭлементУправления" Тогда
					
					Если _тпКолонка.ЭлементУправления = Неопределено Тогда
						Если Свойства_Свойство(_КолонкаСвойствоЗначение,"Тип") Тогда
							_тпКолонка.УстановитьЭлементУправления(Тип(Свойства_Получить(_КолонкаСвойствоЗначение,"Тип")));
						Иначе
							//по умолчанию, это ПолеВвода
							_тпКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
							_тпКолонка.ЭлементУправления.КнопкаВыбора = Истина;
							_тпКолонка.ЭлементУправления.КнопкаОчистки = Истина;
						КонецЕсли;
					Иначе
						//явно описан тип, меняем
						Если Свойства_Свойство(_КолонкаСвойствоЗначение,"Тип")
							И НЕ Тип(Свойства_Получить(_КолонкаСвойствоЗначение,"Тип")) = ТипЗнч(_тпКолонка.ЭлементУправления) Тогда
							_тпКолонка.УстановитьЭлементУправления(Тип(Свойства_Получить(_КолонкаСвойствоЗначение,"Тип")));
						Иначе
							//пропускаем
						КонецЕсли;
					КонецЕсли;
					
					Если Свойства_ЭтоКоллекция(_КолонкаСвойствоЗначение) Тогда
						Попытка
							Для каждого _КолонкаСвойствоСвойство Из _КолонкаСвойствоЗначение Цикл
								_КолонкаСвойствоСвойствоИмя = СвойстваСтрока_Имя(_КолонкаСвойствоСвойство);
								_КолонкаСвойствоСвойствоЗначение = СвойстваСтрока_Значение(_КолонкаСвойствоСвойство);
								Если _КолонкаСвойствоСвойствоИмя = "Тип" Тогда
									//пропускаем
								ИначеЕсли _КолонкаСвойствоСвойствоИмя = "Действия" Тогда
									//ожидается коллекция
									Для каждого _КолонкаСвойствоСвойствоСвойство Из _КолонкаСвойствоСвойствоЗначение Цикл
										_КолонкаСвойствоСвойствоСвойствоИмя = СвойстваСтрока_Имя(_КолонкаСвойствоСвойство);
										_КолонкаСвойствоСвойствоСвойствоЗначение = СвойстваСтрока_Значение(_КолонкаСвойствоСвойство);
										_тпКолонка.ЭлементУправления.УстановитьДействие(_КолонкаСвойствоСвойствоСвойствоИмя, Новый Действие(_КолонкаСвойствоСвойствоСвойствоЗначение));
									КонецЦикла;
								Иначе
									//ожидается простое значение
									_тпКолонка.ЭлементУправления[_КолонкаСвойствоСвойствоИмя] = _КолонкаСвойствоСвойствоЗначение;
								КонецЕсли;
							КонецЦикла;
						Исключение КонецПопытки;
					
					Иначе
						//пока смысла не вижу
						//Попытка
						//	_тпКолонка.ЭлементУправления = _КолонкаСвойствоЗначение;
						//Исключение КонецПопытки;
					КонецЕсли;
					
				Иначе
					Если Свойства_ЭтоКоллекция(_КолонкаСвойствоЗначение) Тогда
						
						Попытка
							Для каждого _КолонкаСвойствоСвойство Из _КолонкаСвойствоЗначение Цикл
								_КолонкаСвойствоСвойствоИмя = СвойстваСтрока_Имя(_КолонкаСвойствоСвойство);
								_КолонкаСвойствоСвойствоЗначение = СвойстваСтрока_Значение(_КолонкаСвойствоСвойство);
								//ожидается простое значение
								_тпКолонка[_КолонкаСвойствоИмя][_КолонкаСвойствоСвойствоИмя] = _КолонкаСвойствоСвойствоЗначение;
							КонецЦикла;
						Исключение КонецПопытки;
					
					Иначе
						//некое свойство колонки с простым значением
						Попытка
							_тпКолонка[_КолонкаСвойствоИмя] = _КолонкаСвойствоЗначение;
						Исключение КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЦикла;
			
		Иначе
			// некое значение для колонки в целом
			// можно будет какое то свойство по умолчанию назначить, например Данные
			_тпКолонка["Данные"] = _КолонкаЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

#КонецОбласти

#КонецЕсли

#Область КонструкторыУФ

Функция _Команда(пИмя, пДействие = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено) Экспорт
	
	_Имя = ?(Найти(пИмя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Команды.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		_НовыйЭлемент = мФорма.Команды.Добавить(_Имя);
	КонецЕсли;
	
	Если пДействие = Неопределено Тогда
		_НовыйЭлемент.Действие = _Имя;
	Иначе
		_НовыйЭлемент.Действие = пДействие;
	КонецЕсли;
	
	Если НЕ пЗаголовок = Неопределено Тогда
		_НовыйЭлемент.Заголовок = пЗаголовок;
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильКоманда);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Группа(пИмя, пВид, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	Перем _Группировка;
	
	_Имя = ?(Найти(пИмя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Элементы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		
		Если ТипЗнч(пРодитель) = Тип("Строка") Тогда
			_Родитель = мФорма.Элементы.Найти(пРодитель);
		ИначеЕсли пРодитель = Неопределено Тогда
			_Родитель = мРодитель;
		Иначе
			_Родитель = пРодитель;
		КонецЕсли;
		
		Если _Родитель = Неопределено И пЭлемент = Неопределено Тогда
			_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ГруппаФормы"));
		ИначеЕсли пЭлемент = Неопределено Тогда
			_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ГруппаФормы"), _Родитель);
		ИначеЕсли _Родитель = Неопределено Тогда
			_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ГруппаФормы"), , пЭлемент);
		Иначе
			_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ГруппаФормы"), _Родитель, пЭлемент);
		КонецЕсли;
		
		//общие стили только на новые группы
		_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
		_Стиль_Применить(_НовыйЭлемент, мСтильГруппа);
		
		Если ТипЗнч(пВид) = Тип("Строка") Тогда
			_НовыйЭлемент.Вид = ПредопределенноеЗначение("ВидГруппыФормы."+пВид);
		Иначе
			_НовыйЭлемент.Вид = пВид;
		КонецЕсли;
		
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	мРодитель = _НовыйЭлемент;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ГруппаОбычная(пИмя, пГруппировка = Неопределено, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _Группа(пИмя, "ОбычнаяГруппа", пРодитель, пСтиль, пЭлемент);
	
	Если НЕ пГруппировка = Неопределено Тогда
		Если пГруппировка = "-" Тогда
			_НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ИначеЕсли ТипЗнч(пГруппировка) = Тип("Строка") Тогда
			_НовыйЭлемент.Группировка = ПредопределенноеЗначение("ГруппировкаПодчиненныхЭлементовФормы."+пГруппировка);
		Иначе
			_НовыйЭлемент.Группировка = пГруппировка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ГруппаСтраницы(пИмя, пОтображениеСтраниц = Неопределено, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _Группа(пИмя, "Страницы", пРодитель, пСтиль, пЭлемент);
	
	Если НЕ пОтображениеСтраниц = Неопределено Тогда
		Если ТипЗнч(пОтображениеСтраниц) = Тип("Строка") Тогда
			_НовыйЭлемент.ОтображениеСтраниц = ПредопределенноеЗначение("ОтображениеСтраницФормы."+пОтображениеСтраниц);
		Иначе
			_НовыйЭлемент.ОтображениеСтраниц = пОтображениеСтраниц;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ГруппаСтраница(пИмя, пГруппировка = Неопределено, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _Группа(пИмя, "Страница", пРодитель, пСтиль, пЭлемент);
	
	Если НЕ пГруппировка = Неопределено Тогда
		Если пГруппировка = "-" Тогда
			_НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ИначеЕсли ТипЗнч(пГруппировка) = Тип("Строка") Тогда
			_НовыйЭлемент.Группировка = ПредопределенноеЗначение("ГруппировкаПодчиненныхЭлементовФормы."+пГруппировка);
		Иначе
			_НовыйЭлемент.Группировка = пГруппировка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ГруппаКолонок(пИмя, пГруппировка = Неопределено, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _Группа(пИмя, "ГруппаКолонок", пРодитель, пСтиль, пЭлемент);
	
	Если НЕ пГруппировка = Неопределено Тогда
		Если пГруппировка = "-" Тогда
			_НовыйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
		ИначеЕсли ТипЗнч(пГруппировка) = Тип("Строка") Тогда
			_НовыйЭлемент.Группировка = ПредопределенноеЗначение("ГруппировкаКолонок."+пГруппировка);
		Иначе
			_НовыйЭлемент.Группировка = пГруппировка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _КоманднаяПанель(пИмя, пРодитель = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _Группа(пИмя, "КоманднаяПанель", пРодитель, пСтиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Декорация(пИмя, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Элементы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		
		_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ДекорацияФормы"), мРодитель, пЭлемент);
		//_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ДекорацияФормы"));
		
	КонецЕсли;
	
	_НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	
	Если НЕ пЗаголовок = Неопределено Тогда
		_НовыйЭлемент.Заголовок = пЗаголовок;
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильДекорация);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _КнопкаУФ(пИмя, пИмяКоманды = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Элементы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("КнопкаФормы"), мРодитель, пЭлемент);
	КонецЕсли;
	
	Если НЕ пИмяКоманды = Неопределено Тогда
		_НовыйЭлемент.ИмяКоманды = пИмяКоманды;
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильКнопка);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _КнопкаСКомандой(пИмя, пДействие = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_СвойстваКоманды = "Действие, Заголовок, ИзменяетСохраняемыеДанные, Имя, Картинка, Отображение, Подсказка, СочетаниеКлавиш";
	
	_Стиль = _Стиль_Получить(пСтиль);
	
	__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, _СвойстваКоманды);
	
	_Команда(_Имя, ?(пДействие = Неопределено, пИмя, пДействие), пЗаголовок, __Стиль);
	
	__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, , _СвойстваКоманды);
	
	_НовыйЭлемент = _КнопкаУФ(_Имя, _Имя, __Стиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ПолеФормы(пИмя, пВид, пПутьКДанным = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Элементы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		
		_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ПолеФормы"), мРодитель, пЭлемент);
		
		_НовыйЭлемент.Вид = ?(ТипЗнч(пВид) = Тип("ВидПоляФормы"), пВид, ПредопределенноеЗначение("ВидПоляФормы."+пВид));
		
		//Если НЕ пПутьКДанным = Неопределено Тогда
		//	_НовыйЭлемент.ПутьКДанным = пПутьКДанным;
		//КонецЕсли;
		
		Если пПутьКДанным = Неопределено Тогда
			_НовыйЭлемент.ПутьКДанным = _Имя;
		ИначеЕсли пПутьКДанным = "" Тогда
			//пропуск
		Иначе
			_НовыйЭлемент.ПутьКДанным = пПутьКДанным;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ пЗаголовок = Неопределено Тогда
		_НовыйЭлемент.Заголовок = пЗаголовок;
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильПоле);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ПолеХТМЛ(пИмя, пПутьКДанным = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _ПолеФормы(пИмя, ВидПоляФормы.ПолеHTMLДокумента, пПутьКДанным, пЗаголовок, пСтиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ПолеВводаУФ(пИмя, пПутьКДанным = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _ПолеФормы(пИмя, ВидПоляФормы.ПолеВвода, пПутьКДанным, пЗаголовок, пСтиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _НадписьУФ(пИмя = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _ПолеФормы(?(пИмя = Неопределено, ПолучитьУникальноеИмя(), пИмя), ВидПоляФормы.ПолеНадписи, пЗаголовок, пСтиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ФлажокУФ(пИмя = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_НовыйЭлемент = _ПолеФормы(?(пИмя = Неопределено, ПолучитьУникальноеИмя(), пИмя), ВидПоляФормы.ПолеФлажка, пЗаголовок, пСтиль, пЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Таблица(пИмя, пПутьКДанным = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	
	_НовыйЭлемент = мФорма.Элементы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		
		_НовыйЭлемент = мФорма.Элементы.Вставить(_Имя, Тип("ТаблицаФормы"), мРодитель, пЭлемент);
		
		Если пПутьКДанным = Неопределено Тогда
			_НовыйЭлемент.ПутьКДанным = _Имя;
		ИначеЕсли пПутьКДанным = "" Тогда
			//пропуск
		Иначе
			_НовыйЭлемент.ПутьКДанным = пПутьКДанным;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ пЗаголовок = Неопределено Тогда
		_НовыйЭлемент.Заголовок = пЗаголовок;
	КонецЕсли;
	
	_Стиль_Применить(_НовыйЭлемент, мСтильЭлемент);
	_Стиль_Применить(_НовыйЭлемент, мСтильПоле);
	_Стиль_Применить(_НовыйЭлемент, пСтиль);
	
	мРодитель = _НовыйЭлемент;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

#КонецОбласти

#Область КонструкторыОбщие

Функция _Кнопка(пИмя, пДействие = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	Если мЭтоУправляемаяФорма Тогда
		_НовыйЭлемент = _КнопкаСКомандой(пИмя, пДействие, пЗаголовок, пСтиль, пЭлемент);
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		_НовыйЭлемент = _КнопкаОФ(пИмя, пДействие, пЗаголовок, пСтиль, пЭлемент);
		#КонецЕсли
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _ПолеВвода(пИмя, пПутьКДанным = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	Если мЭтоУправляемаяФорма Тогда
		_НовыйЭлемент = _ПолеВводаУФ(пИмя, пПутьКДанным, пЗаголовок, пСтиль, пЭлемент);
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		_НовыйЭлемент = _ПолеВводаОФ(пИмя, пПутьКДанным, пЗаголовок, пСтиль, пЭлемент);
		#КонецЕсли
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Надпись(пИмя = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	Если мЭтоУправляемаяФорма Тогда
		_НовыйЭлемент = _НадписьУФ(пИмя, пЗаголовок, пСтиль, пЭлемент);
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		_НовыйЭлемент = _НадписьОФ(пИмя, пЗаголовок, пСтиль, пЭлемент);
		#КонецЕсли
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция _Флажок(пИмя = Неопределено, пЗаголовок = Неопределено, пСтиль = Неопределено, пЭлемент = Неопределено) Экспорт
	
	Если мЭтоУправляемаяФорма Тогда
		_НовыйЭлемент = _ФлажокУФ(пИмя, пЗаголовок, пСтиль, пЭлемент);
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		_НовыйЭлемент = _ФлажокОФ(пИмя, пЗаголовок, пСтиль, пЭлемент);
		#КонецЕсли
	КонецЕсли;
	
	Возврат _НовыйЭлемент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Стили

Функция _Стиль(пИмя, пОписаниеСтиля) Экспорт
	
	Если НЕ Свойства_ЭтоКоллекция(мИменованыеСтили) Тогда
		мИменованыеСтили = Свойства_Новый();
	КонецЕсли;
	
	Свойства_Добавить(мИменованыеСтили, пИмя, ПарсерОписанияСтиля(пОписаниеСтиля));
	
	
	_Имя = НРег(пИмя);
	
	Если _Имя = "команда" Тогда
		мСтильКоманда = _Имя;
	ИначеЕсли _Имя = "элемент" Тогда
		мСтильЭлемент = _Имя;
	ИначеЕсли _Имя = "кнопка" Тогда
		мСтильКнопка = _Имя;
	ИначеЕсли _Имя = "декорация" Тогда
		мСтильДекорация = _Имя;
	ИначеЕсли _Имя = "группа" Тогда
		мСтильГруппа = _Имя;
	ИначеЕсли _Имя = "надпись" Тогда
		мСтильНадпись = _Имя;
	ИначеЕсли _Имя = "поле" Тогда
		мСтильПоле = _Имя;
	ИначеЕсли _Имя = "полеввода" Тогда
		_Стиль = _Стиль_Получить(пИмя);
		__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, "БегущаяСтрока,ВертикальноеПоложение,ВыделятьОтрицательные,Гиперссылка,ГоризонтальноеПоложение,Доступность,Заголовок,Картинка,Подсказка,ПоложениеКартинкиНадписи,ПрозрачныйФон,РазмерКартинки,Рамка,СочетаниеКлавиш,Формат,ЦветРамки,ЦветТекста,ЦветФона,Шрифт");
		Если __Стиль.Количество()>0 Тогда
			мСтильПолеВводаНадпись = "ПолеВводаНадпись";
			Свойства_Добавить(мИменованыеСтили, мСтильПолеВводаНадпись, __Стиль);
			__Стиль = Свойства_Заполнить(Свойства_Новый(), _Стиль, ,"БегущаяСтрока,Гиперссылка,Заголовок,ПоложениеКартинкиНадписи,РазмерКартинки,ЦветТекста,ЦветФона");
			Если __Стиль.Количество()>0 Тогда
				Свойства_Удалить(мИменованыеСтили, пИмя);
				Свойства_Добавить(мИменованыеСтили, пИмя, __Стиль);
			КонецЕсли;
		КонецЕсли;
		мСтильПолеВвода = _Имя;
	ИначеЕсли _Имя = "рамка" Тогда
		мСтильРамка = _Имя;
	ИначеЕсли _Имя = "флажок" Тогда
		мСтильФлажок = _Имя;
	КонецЕсли;
	
	//Возврат мИменованыеСтили;
	
КонецФункции

Функция _Стиль_Получить(пСтиль)
	
	Возврат _Стиль_ОбработатьПараметр(пСтиль);
	
КонецФункции

Функция _Стиль_Применить(пЭлемент, пСтиль) Экспорт
	
	_Стиль = _Стиль_Получить(пСтиль);
	
	Если Свойства_ЭтоКоллекция(_Стиль) Тогда
		Для каждого _СтильСтрока Из _Стиль Цикл
			Если СвойстваСтрока_Имя(_СтильСтрока) = "Действия" Тогда
				//ожидается коллекция
				Для каждого _СтильСтрокаДействие Из СвойстваСтрока_Значение(_СтильСтрока) Цикл
					_ДействиеИмяСобытия = СвойстваСтрока_Имя(_СтильСтрокаДействие);
					_ДействиеИмяОбработчика = СвойстваСтрока_Значение(_СтильСтрокаДействие);
					#Если ТолстыйКлиентОбычноеПриложение Тогда
						//Попытка
							пЭлемент.УстановитьДействие(_ДействиеИмяСобытия, Новый Действие(_ДействиеИмяОбработчика));
						//Исключение
						//	кпсЖурнал.Добавить("ПостроительФорм._Стиль_Применить: Элемент="+пЭлемент+"; Действие="+_ДействиеИмяСобытия+"; Обработчик="+_ДействиеИмяОбработчика);
						//КонецПопытки;
					#Иначе
						Если мЭтоУправляемаяФорма Тогда
							пЭлемент.УстановитьДействие(_ДействиеИмяСобытия, _ДействиеИмяОбработчика);
						КонецЕсли;
					#КонецЕсли
				КонецЦикла;
				
			ИначеЕсли Свойства_ЭтоКоллекция(СвойстваСтрока_Значение(_СтильСтрока)) Тогда
				//рекурсия для сложных значений (не проверял)
				_Стиль_Применить(пЭлемент[СвойстваСтрока_Имя(_СтильСтрока)], СвойстваСтрока_Значение(_СтильСтрока));
				
			Иначе
				СвойстваСтрока_УстановитьСвойствоОбъекта(пЭлемент, _СтильСтрока);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат _Стиль;
	
КонецФункции

Функция _Стиль_ОбработатьПараметр(пСтиль)
	
	_Стиль = Неопределено;
	
	Если пСтиль = Неопределено Тогда
		//на выход
	ИНачеЕсли Свойства_ЭтоКоллекция(пСтиль) Тогда
		_Стиль = пСтиль;
	Иначе
		//здесь стоит либо имя именованного стиля, либо описание стиля
		Если НЕ Свойства_Свойство(мИменованыеСтили, пСтиль, _Стиль) Тогда
			//считаем что здесь описание стиля
			_Стиль = ПарсерОписанияСтиля(пСтиль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат _Стиль;
	
КонецФункции

#Область Парсеры

Функция ПарсерОписанияСтилей(пТекст) Экспорт
	//"#<ИмяСтиля>{<ИмяСвойства>: <Значение>;}" - именованый стиль
	//"#{<ИмяСвойства>: <Значение>;}" - безымянный
	
	ЭтоОписаниеСтиля = Ложь;
	
	ТекСлово = "";
	
	_Стили = Свойства_Новый();
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		
		ТекСимвол = Сред(пТекст, НомерСимвола, 1);
		
		Если ТекСимвол = "#" И НЕ ЭтоОписаниеСтиля Тогда
			ИмяСтиля = "";
			ТекСлово = "";
			Продолжить;
			
		ИначеЕсли ТекСимвол = "{" Тогда
			ИмяСтиля = ТекСлово;
			ТекСлово = "";
			ЭтоОписаниеСтиля = Истина;
			Продолжить;
			
		ИначеЕсли ТекСимвол = "}" Тогда
			Свойства_Добавить(_Стили, ИмяСтиля, ТекСлово);
			ТекСлово = "";
			Продолжить;
			
		КонецЕсли;
		
		ТекСлово = ТекСлово + ТекСимвол;
		
	КонецЦикла;
	
	//это может быть только объявление имени стиля
	//#<ИмяСтиля>{<ИмяСвойства>: <Значение>;} #<ИмяСтиля>
	Если НЕ ТекСлово = "" Тогда
		Свойства_Добавить(_Стили, ТекСлово, "");
	КонецЕсли;
	
	Для каждого _СтилиСтрока Из _Стили Цикл
		СвойстваСтрока_Значение_Установить(_СтилиСтрока, ПарсерОписанияСтиля(СвойстваСтрока_Значение(_СтилиСтрока)));
	КонецЦикла;
	
	Возврат _Стили;
	
КонецФункции

Функция ПарсерОписанияСтиля(пТекст) Экспорт
	//"<ИмяСвойства>: <Значение>;<ИмяСвойства>: <Значение>;"
	
	_Стиль = Свойства_Новый();
	
	ЭтоСтрока = Ложь;
	ЭтоВложение = 0;
	ТекТег = "";
	ТекЗначение = "";
	ЭтоТег = Истина; //описание начинается с тега
	ТекСлово = "";
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		ТекСимвол = Сред(пТекст, НомерСимвола, 1);
		
		Если ТекСимвол = """" Тогда
			ЭтоСтрока = НЕ ЭтоСтрока;
			
		ИначеЕсли ТекСимвол = "{" Тогда
			ЭтоВложение = ЭтоВложение + 1;
			
		ИначеЕсли ТекСимвол = "}" Тогда
			ЭтоВложение = ЭтоВложение - 1;
			
		ИначеЕсли ЭтоСтрока ИЛИ ЭтоВложение > 0 Тогда
			//пропускаем все
			
		ИначеЕсли ТекСимвол = ":" Тогда
			
			ЭтоТег = Ложь;
			ТекТег = СокрЛ(ТекСлово);
			ТекСлово = "";
			Продолжить;
			
		ИначеЕсли ТекСимвол = ";" Тогда
			
			Свойства_Добавить(_Стиль, ТекТег, ПарсерЗначенияСтиля(СокрП(ТекСлово), ТекТег));
			ЭтоТег = Истина;
			ТекТег = "";
			ТекСлово = "";
			Продолжить;
			
		КонецЕсли;
		
		ТекСлово = ТекСлово + ТекСимвол;
		
	КонецЦикла;
	
	Если НЕ ТекТег = "" Тогда
		Свойства_Добавить(_Стиль, ТекТег, ПарсерЗначенияСтиля(СокрП(ТекСлово), ТекТег));
	КонецЕсли;
	
	Возврат _Стиль;
	
КонецФункции

Функция ПарсерЗначенияСтиля(пЗначение, пИмяСвойства) Экспорт
	
	_Значение = Неопределено;
	
	СложноеЗначениеНач = Найти(пЗначение, "{");
	СложноеЗначениеКон = Найти(пЗначение, "}");
	Если СложноеЗначениеНач > 0 И СложноеЗначениеКон > 0 И СложноеЗначениеНач < СложноеЗначениеКон Тогда
		_Значение = ПарсерСложногоЗначения(Сред(пЗначение, 2, СтрДлина(пЗначение)-2));
	ИначеЕсли Найти(пИмяСвойства, "Шрифт") > 0 Тогда
		_Значение = ПарсерШрифта(пЗначение);
	ИначеЕсли Найти(пИмяСвойства, "Цвет") > 0 Тогда
		_Значение = ПарсерЦвета(пЗначение);
	ИначеЕсли Найти(пИмяСвойства, "Рамка") > 0 Тогда
		_Значение = ПарсерРамки(пЗначение);
	Иначе
		Попытка
			_Значение = Число(пЗначение);
		Исключение
			Попытка
			_Значение = Булево(пЗначение);
			Исключение
				Попытка
					_Значение = Дата(пЗначение);
				Исключение
					Попытка
						_Значение = Вычислить(пЗначение);
					Исключение
						_Значение = пЗначение;
					КонецПопытки;
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Функция ПарсерСложногоЗначения(пТекст)
	//"{<ИмяСвойства>: <Значение>;}"
	_Значение = Свойства_Новый();
	
	ЭтоСтрока = Ложь;
	ЭтоВложение = 0;
	ТекТег = "";
	ТекЗначение = "";
	ЭтоТег = Истина; //описание начинается с тега
	ТекСлово = "";
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		ТекСимвол = Сред(пТекст, НомерСимвола, 1);
		
		Если ТекСимвол = """" Тогда
			ЭтоСтрока = НЕ ЭтоСтрока;
			
		ИначеЕсли ТекСимвол = "{" Тогда
			ЭтоВложение = ЭтоВложение + 1;
			
		ИначеЕсли ТекСимвол = "}" Тогда
			ЭтоВложение = ЭтоВложение - 1;
			
		ИначеЕсли ЭтоСтрока ИЛИ ЭтоВложение > 0 Тогда
			//пропускаем все
			
		ИначеЕсли ТекСимвол = ":" Тогда
			
			ЭтоТег = Ложь;
			ТекТег = СокрЛ(ТекСлово);
			ТекСлово = "";
			Продолжить;
			
		ИначеЕсли ТекСимвол = ";" Тогда
			
			Свойства_Добавить(_Значение, ТекТег, ПарсерЗначенияСтиля(СокрП(ТекСлово), ТекТег));
			ЭтоТег = Истина;
			ТекТег = "";
			ТекСлово = "";
			Продолжить;
			
		КонецЕсли;
		
		ТекСлово = ТекСлово + ТекСимвол;
		
	КонецЦикла;
	
	Если НЕ ТекТег = "" Тогда
		Свойства_Добавить(_Значение, ТекТег, ПарсерЗначенияСтиля(СокрП(ТекСлово), ТекТег));
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Функция ПарсерШрифта(пТекст) Экспорт
	//<ИмяШрифта> <Размер> <Жирный> <Наклонный> <Подчеркнутый> <Зачеркнутый> <Масштаб>
	//"MS Shell Dlg" 16 Жирный Наклонный 150%
	
	ЭтоСтрока = Ложь;
	
	Слова = Новый Массив;
	
	ТекСлово = "";
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		
		ТекСимвол = Сред(пТекст, НомерСимвола, 1);
		
		Если ТекСимвол = """" Тогда
			
			Если ЭтоСтрока Тогда
				Слова.Добавить(ТекСимвол + ТекСлово + ТекСимвол);
				//Слова.Добавить(ТекСлово);
				ЭтоСтрока = Ложь;
			Иначе
				ЭтоСтрока = Истина;
			КонецЕсли;
			
			ТекСлово = "";
			
			Продолжить;
			
		ИначеЕсли ТекСимвол = " " И НЕ ЭтоСтрока Тогда
			
			Если НЕ ТекСлово = "" Тогда
				Слова.Добавить(ТекСлово);
			КонецЕсли;
			
			ТекСлово = "";
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСлово = ТекСлово + ТекСимвол;
		
	КонецЦикла;
	
	Если НЕ ТекСлово = "" Тогда
		Слова.Добавить(ТекСлово);
	КонецЕсли;
	
	ИмяШрифта = Неопределено;
	Размер = -1;
	Жирный = Ложь;
	Наклонный = Ложь;
	Подчеркнутый = Ложь;
	Зачеркнутый = Ложь;
	Масштаб = 100;
	
	Пока Слова.Количество()>0 Цикл
		
		Если ИмяШрифта = Неопределено Тогда
			Если ЭтоСтрока(Слова[0]) Тогда
				ИмяШрифта = СтрЗаменить(Слова[0], """", "");
				Слова.Удалить(0);
			Иначе
				ИмяШрифта = "";
			КонецЕсли;
		ИначеЕсли Размер = -1 Тогда
			Если ЭтоЧисло(Слова[0]) Тогда
				Размер = Число(Слова[0]);
				Слова.Удалить(0);
			Иначе
				Размер = Неопределено;
			КонецЕсли;
		ИначеЕсли Жирный = Ложь Тогда
			Если Слова[0] = "Жирный" Тогда
				Жирный = Истина;
				Слова.Удалить(0);
			Иначе
				Жирный = Неопределено;
			КонецЕсли;
		ИначеЕсли Наклонный = Ложь Тогда
			Если Слова[0] = "Наклонный" Тогда
				Наклонный = Истина;
				Слова.Удалить(0);
			Иначе
				Наклонный = Неопределено;
			КонецЕсли;
		ИначеЕсли Подчеркнутый = Ложь Тогда
			Если Слова[0] = "Подчеркнутый" Тогда
				Подчеркнутый = Истина;
				Слова.Удалить(0);
			Иначе
				Подчеркнутый = Неопределено;
			КонецЕсли;
		ИначеЕсли Зачеркнутый = Ложь Тогда
			Если Слова[0] = "Зачеркнутый" Тогда
				Зачеркнутый = Истина;
				Слова.Удалить(0);
			Иначе
				Зачеркнутый = Неопределено;
			КонецЕсли;
		ИначеЕсли Масштаб = 100 Тогда
			Если Прав(Слова[0],1)="%" И ЭтоЧисло(Сред(Слова[0], 1, СтрДлина(Слова[0])-1)) Тогда
				Масштаб = Число(Сред(Слова[0], 1, СтрДлина(Слова[0])-1));
				Слова.Удалить(0);
			Иначе
				Масштаб = Неопределено;
			КонецЕсли;
		Иначе//неизвестный Тег
			Слова.Удалить(0);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяШрифта = "" Тогда
		Возврат Новый Шрифт(, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый, Масштаб);
	Иначе
		//ИмяШрифта - это может быть ссылка на именованный стиль в котором описан шрифт
		_Стиль = Неопределено;
		_Шрифт = Неопределено;
		Если Свойства_Свойство(мИменованыеСтили, ИмяШрифта, _Стиль) 
			И Свойства_Свойство(_Стиль, "Шрифт", _Шрифт) Тогда
			Возврат Новый Шрифт(_Шрифт, , Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый, Масштаб);
		Иначе
			Возврат Новый Шрифт(ИмяШрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый, Масштаб);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПарсерРамки(пТекст) Экспорт
	//<ТипРамки> <Толщина>
	//"Одинарная" 2
	
	ЭтоСтрока = Ложь;
	
	Слова = Новый Массив;
	
	ТекСлово = "";
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		
		ТекСимвол = Сред(пТекст, НомерСимвола, 1);
		
		Если ТекСимвол = """" Тогда
			
			Если ЭтоСтрока Тогда
				Слова.Добавить(ТекСимвол + ТекСлово + ТекСимвол);
				ЭтоСтрока = Ложь;
			Иначе
				ЭтоСтрока = Истина;
			КонецЕсли;
			
			ТекСлово = "";
			
			Продолжить;
			
		ИначеЕсли ТекСимвол = " " И НЕ ЭтоСтрока Тогда
			
			Если НЕ ТекСлово = "" Тогда
				Слова.Добавить(ТекСлово);
			КонецЕсли;
			
			ТекСлово = "";
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСлово = ТекСлово + ТекСимвол;
		
	КонецЦикла;
	
	Если НЕ ТекСлово = "" Тогда
		Слова.Добавить(ТекСлово);
	КонецЕсли;
	
	ТипРамки = Неопределено;
	Толщина = -1;
	
	Пока Слова.Количество()>0 Цикл
		Если ТипРамки = Неопределено Тогда
			Если ЭтоСтрока(Слова[0]) Тогда
				ТипРамки = СтрЗаменить(Слова[0], """", "");
				Слова.Удалить(0);
			Иначе
				ТипРамки = "БезРамки";
			КонецЕсли;
		ИначеЕсли Толщина = -1 Тогда
			Если ЭтоЧисло(Слова[0]) Тогда
				Толщина = Число(Слова[0]);
				Слова.Удалить(0);
			Иначе
				Толщина = 1;
			КонецЕсли;
		Иначе//неизвестный Тег
			Слова.Удалить(0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Рамка(ТипРамкиЭлементаУправления[ТипРамки], ?(Толщина<1,1,Толщина));
	
КонецФункции

Функция ПарсерЦвета(пТекст) Экспорт
	
	_Значение = Неопределено;
	
	//заглушка
	_Значение = Новый Цвет;
	
	Если Лев(пТекст, 1) = "#" Тогда
		R = конв16_10(Сред(пТекст, 2, 2));
		G = конв16_10(Сред(пТекст, 4, 2));
		B = конв16_10(Сред(пТекст, 6, 2));
		_Значение = Новый Цвет(R,G,B);
	ИначеЕсли Лев(пТекст, 10) = "Библиотека" Тогда
		//мФорма.
		_Значение = Новый Цвет;
	Иначе
		Попытка
			_Значение = Вычислить(пТекст);
		Исключение
			_Значение = Новый Цвет;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Дополнительно

Функция ЭтоСтрока(пТекст)
	
	Возврат Лев(пТекст, 1) = """" И Прав(пТекст, 1) = """";
	
КонецФункции

Функция ЭтоЧисло(пТекст)
	
	Для НомерСимвола = 1 По СтрДлина(пТекст) Цикл
		Если Найти("0123456789,", Сред(пТекст, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция конв16_10(пТекст16)
	
	_Результат = 0;
	_Индекс = СтрДлина(пТекст16);
	_Множитель = 1;
	Пока _Индекс > 0 Цикл
		_Результат = _Результат + (Найти("0123456789ABCDEF", Сред(пТекст16, _Индекс, 1))-1)*_Множитель;
		_Индекс = _Индекс - 1;
		_Множитель = _Множитель*16;
	КонецЦикла;
	
	Возврат _Результат;
	
КонецФункции

Функция ПредставлениеЦвета(Цвет) Экспорт
	
	СтрокаЦвета = "";
	СтрокаЗнаков = "0123456789ABCDEF";
	ЧислоЦвета = Цвет.Красный * 65536 + Цвет.Зеленый * 256 + Цвет.Синий;
	Пока ЧислоЦвета <> 0 Цикл
		ПозицияЗнака = ЧислоЦвета % 16 + 1;
		ЧислоЦвета = Цел(ЧислоЦвета / 16);
		СтрокаЦвета = Сред(СтрокаЗнаков, ПозицияЗнака, 1) + СтрокаЦвета;
	КонецЦикла; 
	
	Возврат "#" + Прав("000000" + СтрокаЦвета, 6);
	
КонецФункции

Функция ПолучитьУникальноеИмя(пПрефикс = "_") Экспорт
	
	Имя = Строка(Новый УникальныйИдентификатор);
	
	Имя = СтрЗаменить(Имя, "-", "_");
	
	Возврат пПрефикс + Имя;
	
КонецФункции

Функция ПрефиксИмя(пИмя, пПрефикс = "")
	
	Если НЕ пПрефикс = "" И НЕ мПрефиксИмен = "" Тогда
		_Имя = ?(Найти(пИмя, мПрефиксИмен)=1, Сред(пИмя, СтрДлина(мПрефиксИмен)+1), пИмя);
		_Имя = ?(Найти(_Имя, пПрефикс)=1,     Сред(_Имя, СтрДлина(пПрефикс)+1),     _Имя);
		_Имя = мПрефиксИмен + пПрефикс + _Имя;
	ИначеЕсли пПрефикс = "" Тогда
		_Имя = ?(Найти(пИмя, мПрефиксИмен)<>1, мПрефиксИмен, "") + пИмя;
	ИначеЕсли мПрефиксИмен = "" Тогда
		_Имя = ?(Найти(пИмя, пПрефикс)<>1, пПрефикс, "") + пИмя;
	КонецЕсли;
	
	Возврат _Имя;
	
КонецФункции

Функция СинонимПоИмени(пИмя)
	
	_пИмя = ?(Найти(пИмя, мПрефиксИмен)=1, Сред(пИмя, СтрДлина(мПрефиксИмен)+1), пИмя);
	
	_Имя = Лев(_пИмя, 1);
	
	Для Индекс = 2 По СтрДлина(_пИмя) Цикл
		
		_Символ = Сред(_пИмя, Индекс, 1);
		//_Код = КодСимвола(_Символ);
		
		Если _Символ = ВРег(_Символ) Тогда
			_Символ = " " + НРег(_Символ);
		КонецЕсли;
		
		_Имя = _Имя + _Символ;
		
	КонецЦикла;
	
	Возврат _Имя;
	
КонецФункции

#КонецОбласти

#Область Процедуры_для_работы_с_коллекцией

Функция Свойства_Новый(пСвойстваИмена = Неопределено, Значение1 = Неопределено
	, Значение2 = Неопределено
	, Значение3 = Неопределено
	, Значение4 = Неопределено
	, Значение5 = Неопределено
	, Значение6 = Неопределено
	)
	
	Коллекция = Новый ТаблицаЗначений;
	Коллекция.Колонки.Добавить("Имя");
	Коллекция.Колонки.Добавить("Значение");
	
	Если НЕ пСвойстваИмена = Неопределено Тогда
		СвойстваИмена = Новый Структура(пСвойстваИмена);
		Индекс = 1;
		Для каждого СвойствоИмя Из СвойстваИмена Цикл
			Выполнить("Свойства_Добавить(Коллекция, СвойствоИмя.Ключ, Значение"+Индекс+")");
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция Свойства_Добавить(Коллекция, СвойствоИмя, Значение)
	
	КоллекцияСтрока = Коллекция.Найти(СвойствоИмя, "Имя");
	
	Если КоллекцияСтрока = Неопределено Тогда
		КоллекцияСтрока = Коллекция.Добавить();
		КоллекцияСтрока.Имя = СвойствоИмя;
	КонецЕсли;
	
	Если Свойства_ЭтоКоллекция(КоллекцияСтрока.Значение) И Свойства_ЭтоКоллекция(Значение) Тогда
		Свойства_Заполнить(КоллекцияСтрока.Значение, Значение);
	Иначе
		КоллекцияСтрока.Значение = Значение;
	КонецЕсли;
	
КонецФункции

Функция Свойства_Удалить(Коллекция, СвойствоИмя)
	
	КоллекцияСтрока = Коллекция.Найти(СвойствоИмя, "Имя");
	
	Если НЕ КоллекцияСтрока = Неопределено Тогда
		Коллекция.Удалить(КоллекцияСтрока);
	КонецЕсли;
	
КонецФункции

Функция Свойства_Получить(Коллекция, СвойствоИмя = Неопределено, ПоУмолчанию = Неопределено)
	
	Если Коллекция = Неопределено Тогда Возврат ПоУмолчанию КонецЕсли;
	
	КоллекцияСтрока = Коллекция.Найти(СвойствоИмя, "Имя");
	
	Если КоллекцияСтрока = Неопределено Тогда
		Возврат ПоУмолчанию;
	Иначе
		Возврат КоллекцияСтрока.Значение;
	КонецЕсли;
	
КонецФункции

Функция Свойства_Свойство(Коллекция, СвойствоИмя, Значение = Неопределено)
	
	Если Коллекция = Неопределено Тогда Возврат Ложь КонецЕсли;
	
	//КоллекцияСтрока = Коллекция.Найти(СвойствоИмя, "Имя");
	_Имя = НРег(СвойствоИмя);
	_Нашел = Ложь;
	Для каждого КоллекцияСтрока Из Коллекция Цикл
		Если НРег(КоллекцияСтрока.Имя) = _Имя Тогда
			_Нашел = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Значение = ?(КоллекцияСтрока = Неопределено, Значение, КоллекцияСтрока.Значение);
	Значение = ?(_Нашел, КоллекцияСтрока.Значение, Значение);
	
	Возврат _Нашел;
	
КонецФункции

Функция Свойства_Заполнить(пПриемник, пИсточник, пСписокСвойств = Неопределено, пИсключаяСвойства = Неопределено)
	
	Если пИсточник = Неопределено Тогда
		Возврат пПриемник;
	КонецЕсли;
	
	Если пСписокСвойств = Неопределено Тогда
		//_СписокСвойств = Новый Структура();
	Иначе
		_СписокСвойств = Новый Структура(пСписокСвойств);
	КонецЕсли;
	
	Если пИсключаяСвойства = Неопределено Тогда
		//_ИсключаяСвойства = Новый Структура();
	Иначе
		_ИсключаяСвойства = Новый Структура(пИсключаяСвойства);
	КонецЕсли;
	
	Для каждого ИсточникСтрока Из пИсточник Цикл
		_Имя = СвойстваСтрока_Имя(ИсточникСтрока);
		
		Если НЕ пСписокСвойств = Неопределено И НЕ _СписокСвойств.Свойство(_Имя)
			ИЛИ НЕ пИсключаяСвойства = Неопределено И _ИсключаяСвойства.Свойство(_Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Свойства_Добавить(пПриемник, _Имя, СвойстваСтрока_Значение(ИсточникСтрока));
		
	КонецЦикла;
	
	Возврат пПриемник;
	
КонецФункции

Функция СвойстваСтрока_Значение(КоллекцияСтрока)
	
	Возврат КоллекцияСтрока.Значение;
	
КонецФункции

Функция СвойстваСтрока_Значение_Установить(КоллекцияСтрока, Значение)
	
	КоллекцияСтрока.Значение = Значение;
	
КонецФункции

Функция СвойстваСтрока_Имя(КоллекцияСтрока)
	
	Возврат (КоллекцияСтрока.Имя);
	
КонецФункции

Функция СвойстваСтрока_УстановитьСвойствоОбъекта(Объект, КоллекцияСтрока)
	
	Объект[КоллекцияСтрока.Имя] = КоллекцияСтрока.Значение;
	
КонецФункции

Функция Свойства_ЭтоКоллекция(Коллекция)
	
	Возврат 
		Истина
		И ТипЗнч(Коллекция) = Тип("ТаблицаЗначений")
		И НЕ Коллекция.Колонки.Найти("Имя") = Неопределено
		И НЕ Коллекция.Колонки.Найти("Значение") = Неопределено;
	
КонецФункции

#КонецОбласти

#Если ТолстыйКлиентОбычноеПриложение Тогда

#Область Поиск_свободного_места_на_форме

Процедура ВстатьНаСвободноеМесто(пРодитель) Экспорт
	
	_Верх = 0;
	Если мФорма.Панель = пРодитель Тогда
		_Элемент = мДеревоСЭлементамиФормы.Строки.Получить(мДеревоСЭлементамиФормы.Строки.Количество()-1);
		_Верх = _Элемент.Элемент.Верх + _Элемент.Элемент.Высота;
	Иначе
		_Панель = мДеревоСЭлементамиФормы.Строки.Найти(пРодитель, "Элемент", Истина);
		Если НЕ _Панель = Неопределено Тогда
			_Страница = _Панель.Строки.Найти(_Панель.Элемент.ТекущаяСтраница, "Элемент", Истина);
			Если НЕ _Страница = Неопределено И _Страница.Строки.Количество() > 0 Тогда
				_Элемент = _Страница.Строки.Получить(_Страница.Строки.Количество()-1);
				_Верх = _Элемент.Элемент.Верх + _Элемент.Элемент.Высота;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мЛевоБаза = мЗазор;
	мЛевоТекущий = 0;
	мВерхТекущий = _Верх;
	мВысотаТекущий = 0;
	мШиринаТекущий = 0;
	
КонецПроцедуры

//декомпилятор http://infostart.ru/public/345430/

Функция ПолучитьДеревоЭлементовФормы(Форма)
	
	СтрокаФормы = ЗначениеВСтрокуВнутр(Форма);
	XMLСтрокаФормы = СтрокаВнутрВХМЛТело(СтрокаФормы);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	СтрокаXPath = "/elem/elem/elem[1]/elem[2]/elem[2]";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM,
	РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	ДЗ = Новый ДеревоЗначений;
	ДЗ.Колонки.Добавить("Элемент");
	ДЗ.Колонки.Добавить("Верх", Новый ОписаниеТипов("Число"));
	ДЗ.Колонки.Добавить("Лево", Новый ОписаниеТипов("Число"));
	Узел = РезультатXPath.ПолучитьСледующий();
	СтрокаДЗ = ДЗ.Строки.Добавить();
	СтрокаДЗ.Элемент = Форма.Панель;
	Если Узел <> Неопределено Тогда
		ОбойтиУзел(Форма, Узел, СтрокаДЗ);
	КонецЕсли;
	
	ДЗ.Строки.Сортировать("Верх,Лево",Истина);
	
	Возврат ДЗ;
	
КонецФункции

Процедура ОбойтиУзел(Форма, Узел, СтрокаДЗ)
	
	Для каждого УзелЭлФормы Из Узел.ДочерниеУзлы Цикл
		Если УзелЭлФормы.ИмяУзла = "data" Тогда
			Для каждого Страница Из СтрокаДЗ.Элемент.Страницы Цикл
				СтрокаСтраница = СтрокаДЗ.Строки.Добавить();
				СтрокаСтраница.Элемент = Страница;
			КонецЦикла;
		Иначе
			СвойстваЭлФормы = УзелЭлФормы.ДочерниеУзлы;
			ЭтоПанель = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 1].ТекстовоеСодержимое <> "0";
			СвойстваЭлФормыСИменем = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 2].ДочерниеУзлы;
			СвойстваЭлФормыСИндексом = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 3].ДочерниеУзлы;
			ИндексСтраницы = Число(СвойстваЭлФормыСИндексом[СвойстваЭлФормыСИндексом.Количество() - 5].ТекстовоеСодержимое);
			НовСтрокаДЗ = СтрокаДЗ.Строки[ИндексСтраницы].Строки.Добавить();
			НовСтрокаДЗ.Элемент = Форма.ЭлементыФормы[СтрЗаменить(СвойстваЭлФормыСИменем[1].ТекстовоеСодержимое, """", "")];
			НовСтрокаДЗ.Верх = НовСтрокаДЗ.Элемент.Верх;
			НовСтрокаДЗ.Лево = НовСтрокаДЗ.Элемент.Лево;
			Если ЭтоПанель Тогда
				ОбойтиУзел(Форма, СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 1], НовСтрокаДЗ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаВнутрВХМЛТело(вхСтрока) Экспорт
	
	выхХМЛТело = СтрЗаменить(вхСтрока,Символы.ПС,"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,Символы.ВК,"");
	
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"&","&amp;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"<","&lt;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,">","&gt;");
	
	выхХМЛТело = СтрЗаменить(выхХМЛТело,",","</data><data>");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"{","<elem><data>");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"}","</data></elem>");
	
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"<data><elem>","<elem>");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"</elem></data>","</elem>");
	
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"</elem>","</elem>" + Символы.ПС);
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"</data>","</data>" + Символы.ПС);
	
	Возврат выхХМЛТело;
	
КонецФункции

#КонецОбласти

#Область Относительное_размещение

Функция Сжать(пЭлемент, Знач пРазмер, пНаправление = "Лево", пОтносительно = Ложь) Экспорт
	//оставлено для совместимости
	//вместо этой использовать ИзменитьРазмер
	
	Если пНаправление = "Лево" ИЛИ пНаправление = "Право" Тогда
		_Размер = ?(пОтносительно = Истина, пЭлемент.Ширина - пРазмер, пРазмер);
		
		_Размер = ?(_Размер < 44, 44, _Размер);//1с не дает сделать меньше
		
		_пРазмер = ?(пОтносительно = Истина, пЭлемент.Ширина - _Размер, _Размер);
		
		пЭлемент.Ширина = _Размер;
		
		Если пНаправление = "Право" Тогда
			пЭлемент.Лево = пЭлемент.Лево + _пРазмер;
		КонецЕсли;
		
	Иначе
		_Размер = ?(пОтносительно = Истина, пЭлемент.Высота - пРазмер, пРазмер);
		
		_Размер = ?(_Размер < 19, 19, _Размер);
		
		_пРазмер = ?(пОтносительно = Истина, пЭлемент.Высота - _Размер, _Размер);
		
		пЭлемент.Высота = _Размер;
		
		Если пНаправление = "Низ" Тогда
			пЭлемент.Верх = пЭлемент.Верх + _пРазмер;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ИзменитьРазмер(пЭлемент, Знач пРазмер, пНаправление = "Лево", пОтносительно = Истина) Экспорт
	
	Если пНаправление = "Лево" ИЛИ пНаправление = "Право" Тогда
		
		_Размер = ?(пОтносительно = Истина, пЭлемент.Ширина + пРазмер, пРазмер);
		
		_Размер = ?(_Размер < 44, 44, _Размер);//1с не дает сделать меньше
		
		_Смещение = пЭлемент.Ширина - _Размер;
		
		Если _Смещение < 0 И пНаправление = "Лево" Тогда
			пЭлемент.Лево = пЭлемент.Лево + _Смещение;
		КонецЕсли;
		
		пЭлемент.Ширина = _Размер;
		
		Если _Смещение > 0 И пНаправление = "Право" Тогда
			пЭлемент.Лево = пЭлемент.Лево + _Смещение;
		КонецЕсли;
		
	Иначе
		_Размер = ?(пОтносительно = Истина, пЭлемент.Высота + пРазмер, пРазмер);
		
		_Размер = ?(_Размер < 19, 19, _Размер);
		
		_Смещение = пЭлемент.Высота - _Размер;

		Если _Смещение < 0 И пНаправление = "Верх" Тогда
			пЭлемент.Верх = пЭлемент.Верх + _Смещение;
		КонецЕсли;
		
		пЭлемент.Высота = _Размер;
		
		Если _Смещение > 0 И пНаправление = "Низ" Тогда
			пЭлемент.Верх = пЭлемент.Верх + _Смещение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьПривязку(пЭлемент1, пЭлемент2) Экспорт
	Перем _Элемент1, _Граница1, _Элемент2, _Граница2;
	
	пЭлемент2.ПолучитьПривязку(ГраницаЭлементаУправления.Лево, _Элемент1, _Граница1, _Элемент2, _Граница2);
	пЭлемент1.УстановитьПривязку(ГраницаЭлементаУправления.Лево, _Элемент1, _Граница1, _Элемент2, _Граница2);
	
	пЭлемент2.ПолучитьПривязку(ГраницаЭлементаУправления.Право, _Элемент1, _Граница1, _Элемент2, _Граница2);
	пЭлемент1.УстановитьПривязку(ГраницаЭлементаУправления.Право, _Элемент1, _Граница1, _Элемент2, _Граница2);
	
	пЭлемент2.ПолучитьПривязку(ГраницаЭлементаУправления.Верх, _Элемент1, _Граница1, _Элемент2, _Граница2);
	пЭлемент1.УстановитьПривязку(ГраницаЭлементаУправления.Верх, _Элемент1, _Граница1, _Элемент2, _Граница2);
	
	пЭлемент2.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, _Элемент1, _Граница1, _Элемент2, _Граница2);
	пЭлемент1.УстановитьПривязку(ГраницаЭлементаУправления.Низ, _Элемент1, _Граница1, _Элемент2, _Граница2);
	
КонецФункции

Процедура ПоставитьРядомСЭлементом(пЭлемент1, пЭлемент2, пНаправление = Неопределено, пОтступ = Неопределено, пВыровнятьРазмер = Ложь) Экспорт
	
	Если пОтступ = Неопределено Тогда
		_Отступ = мЗазор;
	Иначе
		_Отступ = пОтступ;
	КонецЕсли;
	
	Если пНаправление = "Лево" Тогда
		пЭлемент1.Верх = пЭлемент2.Верх;
		пЭлемент1.Лево = пЭлемент2.Лево - пЭлемент1.Ширина - _Отступ;
	ИначеЕсли пНаправление = "Право" Тогда
		пЭлемент1.Верх = пЭлемент2.Верх;
		пЭлемент1.Лево = пЭлемент2.Лево + пЭлемент2.Ширина + _Отступ;
	ИначеЕсли пНаправление = "Верх" Тогда
		пЭлемент1.Верх = пЭлемент2.Верх - пЭлемент1.Высота - _Отступ;
		пЭлемент1.Лево = пЭлемент2.Лево;
	ИначеЕсли пНаправление = "Низ" Тогда
		пЭлемент1.Верх = пЭлемент2.Верх + пЭлемент2.Высота + _Отступ;
		пЭлемент1.Лево = пЭлемент2.Лево;
	Иначе
		пЭлемент1.Верх = пЭлемент2.Верх;
		пЭлемент1.Лево = пЭлемент2.Лево;
	КонецЕсли;
	
	Если пЭлемент1.Лево < мЛевоБаза Тогда
		_Ширина = пЭлемент1.Ширина - мЛевоБаза + пЭлемент1.Лево;
		пЭлемент1.Ширина = ?(_Ширина < 50, 50, _Ширина);
		пЭлемент1.Лево = мЛевоБаза;
	КонецЕсли;
	
	Если пВыровнятьРазмер = Истина Тогда
		пЭлемент1.Ширина = пЭлемент2.Ширина;
		пЭлемент1.Высота = пЭлемент2.Высота;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривязатьКЭлементу(пЭлемент1, пЭлемент2, пГраница1 = Неопределено, пГраница2 = Неопределено, пРастягивать = Ложь) Экспорт
	
	Если пГраница1 = "Лево" Тогда
		_Граница1 = ГраницаЭлементаУправления.Право;
		_ГраницаЭлемента1 = ГраницаЭлементаУправления.Лево;
		
	ИначеЕсли пГраница1 = "Право" Тогда
		_Граница1 = ГраницаЭлементаУправления.Лево;
		_ГраницаЭлемента1 = ГраницаЭлементаУправления.Право;
		
	ИначеЕсли пГраница1 = "Низ" Тогда
		_Граница1 = ГраницаЭлементаУправления.Верх;
		_ГраницаЭлемента1 = ГраницаЭлементаУправления.Низ;
		
	ИначеЕсли пГраница1 = "Верх" Тогда
		_Граница1 = ГраницаЭлементаУправления.Низ;
		_ГраницаЭлемента1 = ГраницаЭлементаУправления.Верх;
		
	КонецЕсли;
	
	Если пГраница2 = "Лево" Тогда
		_Граница2 = ГраницаЭлементаУправления.Лево;
		_ГраницаЭлемента2 = ГраницаЭлементаУправления.Лево;
		
	ИначеЕсли пГраница2 = "Право" Тогда
		_Граница2 = ГраницаЭлементаУправления.Право;
		_ГраницаЭлемента2 = ГраницаЭлементаУправления.Право;
		
	ИначеЕсли пГраница2 = "Низ" Тогда
		_Граница2 = ГраницаЭлементаУправления.Низ;
		_ГраницаЭлемента2 = ГраницаЭлементаУправления.Низ;
		
	ИначеЕсли пГраница2 = "Верх" Тогда
		_Граница2 = ГраницаЭлементаУправления.Верх;
		_ГраницаЭлемента2 = ГраницаЭлементаУправления.Верх;
		
	КонецЕсли;
	
	Если НЕ _Граница1 = Неопределено Тогда
		пЭлемент1.УстановитьПривязку(_Граница1, пЭлемент2, _ГраницаЭлемента1);
		
		Если НЕ пРастягивать = Истина Тогда
			пЭлемент1.УстановитьПривязку(ПолучитьПротивоположнуюГраницу(_Граница1),  пЭлемент2, _ГраницаЭлемента1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ _Граница2 = Неопределено Тогда
		пЭлемент1.УстановитьПривязку(_Граница2, пЭлемент2, _ГраницаЭлемента2);
		
		Если НЕ пРастягивать = Истина Тогда
			пЭлемент1.УстановитьПривязку(ПолучитьПротивоположнуюГраницу(_Граница2),  пЭлемент2, _ГраницаЭлемента2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Разместить(пЭлемент1, пЭлемент2, пНаправление = Неопределено, пОтступ = Неопределено, пВыровнятьРазмер = Ложь) Экспорт
	
	Перем _Граница1, _Граница2;
	
	Если пНаправление = "Лево" Тогда
		_Граница1 = "Лево";
		_Граница2 = "Верх";
	ИначеЕсли пНаправление = "Право" Тогда
		_Граница1 = "Право";
		_Граница2 = "Верх";
	ИначеЕсли пНаправление = "Верх" Тогда
		_Граница1 = "Верх";
		_Граница2 = "Лево";
	ИначеЕсли пНаправление = "Низ" Тогда
		_Граница1 = "Низ";
		_Граница2 = "Лево";
	КонецЕсли;
	
	ПоставитьРядомСЭлементом(пЭлемент1, пЭлемент2, пНаправление, пОтступ, пВыровнятьРазмер);
	
	ПривязатьКЭлементу(пЭлемент1, пЭлемент2, _Граница1, _Граница2);
	
КонецПроцедуры

Функция Размещение_Получить(пЭлемент = Неопределено, Граница1 = Неопределено, Граница2 = Неопределено, пШирина = -1, пВысота = -1, пЗазор = -1, Растягивать = Ложь) Экспорт
	//оставлено для совместимости
	//вместо этой использовать Разместить
	
	Если пЭлемент = Неопределено Тогда
		ЭлементУправления_Лево = мЛевоТекущий;
		ЭлементУправления_Верх = мВерхТекущий;
		ЭлементУправления_Ширина = мШиринаТекущий;
		ЭлементУправления_Высота = мВысотаТекущий;
		
	Иначе
		ЭлементУправления_Лево = пЭлемент.Лево;
		ЭлементУправления_Верх = пЭлемент.Верх;
		ЭлементУправления_Ширина = пЭлемент.Ширина;
		ЭлементУправления_Высота = пЭлемент.Высота;
		
	КонецЕсли;
	
	Размещение_Зазор = ?(пЗазор = -1, мЗазор, пЗазор);
	
	Размещение_Ширина = ?(пШирина = -1, мШирина, пШирина);
	
	Размещение_Высота = ?(пВысота = -1, мВысота, пВысота);
	
	Размещение_Лево = ЭлементУправления_Лево;
	
	Размещение_Верх = ЭлементУправления_Верх;
	
	//Привязка_Граница = ГраницаЭлементаУправления.Право;
	
	Если Граница1 = "Лево" Тогда
		Размещение_Лево = ЭлементУправления_Лево - Размещение_Ширина - Размещение_Зазор;
		Граница1 = ГраницаЭлементаУправления.Право;
		ГраницаЭлемента1 = ГраницаЭлементаУправления.Лево;
		
	ИначеЕсли Граница1 = "Право" Тогда
		Размещение_Лево = ЭлементУправления_Лево + ЭлементУправления_Ширина + Размещение_Зазор;
		Граница1 = ГраницаЭлементаУправления.Лево;
		ГраницаЭлемента1 = ГраницаЭлементаУправления.Право;
		
	ИначеЕсли Граница1 = "Низ" Тогда
		Размещение_Верх = ЭлементУправления_Верх + ЭлементУправления_Высота + Размещение_Зазор;
		Граница1 = ГраницаЭлементаУправления.Верх;
		ГраницаЭлемента1 = ГраницаЭлементаУправления.Низ;
		
	ИначеЕсли Граница1 = "Верх" Тогда
		Размещение_Верх = ЭлементУправления_Верх - Размещение_Высота - Размещение_Зазор;
		Граница1 = ГраницаЭлементаУправления.Низ;
		ГраницаЭлемента1 = ГраницаЭлементаУправления.Верх;
		
	//Иначе
	//	Граница1 = ГраницаЭлементаУправления.Лево;
	//	ГраницаЭлемента1 = ГраницаЭлементаУправления.Лево;
		
	КонецЕсли;
	
	Если Граница2 = "Лево" Тогда
		Размещение_Лево = ЭлементУправления_Лево;
		Граница2 = ГраницаЭлементаУправления.Лево;
		ГраницаЭлемента2 = ГраницаЭлементаУправления.Лево;
		
	ИначеЕсли Граница2 = "Право" Тогда
		Размещение_Лево = ЭлементУправления_Лево + ЭлементУправления_Ширина - Размещение_Ширина;
		Граница2 = ГраницаЭлементаУправления.Право;
		ГраницаЭлемента2 = ГраницаЭлементаУправления.Право;
		
	ИначеЕсли Граница2 = "Низ" Тогда
		Размещение_Верх = ЭлементУправления_Верх + ЭлементУправления_Высота - Размещение_Высота;
		Граница2 = ГраницаЭлементаУправления.Низ;
		ГраницаЭлемента2 = ГраницаЭлементаУправления.Низ;
		
	ИначеЕсли Граница2 = "Верх" Тогда
		Размещение_Верх = ЭлементУправления_Верх;
		Граница2 = ГраницаЭлементаУправления.Верх;
		ГраницаЭлемента2 = ГраницаЭлементаУправления.Верх;
		
	//Иначе
	//	Граница2 = ГраницаЭлементаУправления.Верх;
	//	ГраницаЭлемента2 = ГраницаЭлементаУправления.Верх;
		
	КонецЕсли;
	
	Размещение_Лево = ?(Размещение_Лево < 0, 0, Размещение_Лево);
	
	Размещение_Верх = ?(Размещение_Верх < 0, 0, Размещение_Верх);
	
	Размещение = Новый Структура();
	
	Размещение.Вставить("Лево", Размещение_Лево);
	Размещение.Вставить("Верх", Размещение_Верх);
	
	Размещение.Вставить("Ширина", Размещение_Ширина);
	Размещение.Вставить("Высота", Размещение_Высота);
	
	Размещение.Вставить("ЭлементУправления", пЭлемент);
	//Размещение.Вставить("ГраницаЭлементаУправления", ГраницаЭлементаУправления);
	
	Размещение.Вставить("Граница1", Граница1);
	Размещение.Вставить("Граница2", Граница2);
	
	Размещение.Вставить("ГраницаЭлемента1", ГраницаЭлемента1);
	Размещение.Вставить("ГраницаЭлемента2", ГраницаЭлемента2);
	
	Размещение.Вставить("Растягивать", Растягивать = Истина);
	
	//Размещение.Вставить("ПривязкаСнизу", ПривязкаСнизу = Истина);
	
	Возврат Размещение;
	
КонецФункции

Функция Размещение_Применить(пЭлемент, пРазмещение)
	//оставлено для совместимости
	//вместо этой использовать Разместить
	
	Перем _Элемент1, ГраницаЭлемента1, _Элемент2, ГраницаЭлемента2;
	
	пЭлемент.Ширина = пРазмещение.Ширина;
	
	пЭлемент.Высота = пРазмещение.Высота;
	
	пЭлемент.Лево = пРазмещение.Лево;
	
	пЭлемент.Верх = пРазмещение.Верх;
	
	Если НЕ пРазмещение.Граница1 = Неопределено Тогда
		пЭлемент.УстановитьПривязку(пРазмещение.Граница1,  пРазмещение.ЭлементУправления, пРазмещение.ГраницаЭлемента1);
		
		Если НЕ пРазмещение.Растягивать = Истина Тогда
			пЭлемент.УстановитьПривязку(ПолучитьПротивоположнуюГраницу(пРазмещение.Граница1),  пРазмещение.ЭлементУправления, пРазмещение.ГраницаЭлемента1);
		КонецЕсли;
		
		//Размещение.ЭлементУправления.ПолучитьПривязку(Размещение.Граница1, _Элемент1, ГраницаЭлемента1, _Элемент2, ГраницаЭлемента2);
		//
		//пЭлемент.УстановитьПривязку(Размещение.Граница1, _Элемент1, ГраницаЭлемента1, _Элемент2, ГраницаЭлемента2);
		
	КонецЕсли;
	
	Если НЕ пРазмещение.Граница2 = Неопределено Тогда
		пЭлемент.УстановитьПривязку(пРазмещение.Граница2,  пРазмещение.ЭлементУправления, пРазмещение.ГраницаЭлемента2);
		
		Если НЕ пРазмещение.Растягивать = Истина Тогда
			пЭлемент.УстановитьПривязку(ПолучитьПротивоположнуюГраницу(пРазмещение.Граница2),  пРазмещение.ЭлементУправления, пРазмещение.ГраницаЭлемента2);
		КонецЕсли;
		//Размещение.ЭлементУправления.ПолучитьПривязку(Размещение.Граница2, _Элемент1, ГраницаЭлемента1, _Элемент2, ГраницаЭлемента2);
		//
		//пЭлемент.УстановитьПривязку(Размещение.Граница2, _Элемент1, ГраницаЭлемента1, _Элемент2, ГраницаЭлемента2);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПротивоположнуюГраницу(Граница)
	
	Если Граница = ГраницаЭлементаУправления.Лево Тогда
		
		Возврат ГраницаЭлементаУправления.Право;
		
	ИначеЕсли Граница = ГраницаЭлементаУправления.Право Тогда
		
		Возврат ГраницаЭлементаУправления.Лево;
		
	ИначеЕсли Граница = ГраницаЭлементаУправления.Верх Тогда
		
		Возврат ГраницаЭлементаУправления.Низ;
		
	ИначеЕсли Граница = ГраницаЭлементаУправления.Низ Тогда
		
		Возврат ГраницаЭлементаУправления.Верх;
		
	Иначе
		
		Возврат Граница;//ГраницаЭлементаУправления.Центр;
		
	КонецЕсли;
	
КонецФункции

Процедура ПривязкаПоУмолчанию(пЭлемент, пГоризонтальная = Истина, пВертикальная = Ложь, пЭлемент2 = Неопределено)
	
	Если НЕ мПривязки Тогда
		Возврат;
	КонецЕсли;
	
	_Элемент2 = ?(пЭлемент2 = Неопределено, мРодитель, пЭлемент2);
	
	Если пГоризонтальная = Истина Тогда
		пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, _Элемент2, ГраницаЭлементаУправления.Лево);
		пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, _Элемент2, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
	Если пВертикальная = Истина Тогда
		пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх, _Элемент2, ГраницаЭлементаУправления.Верх);
		пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ, _Элемент2, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоложениеЭлемента(пЭлемент)
	
	Если мГруппировка = "Горизонтально" Тогда
		пЭлемент.Верх = мВерхТекущий;
		пЭлемент.Лево = мЛевоТекущий + мШиринаТекущий + мЗазор;
		Если мПривязки Тогда
			мТекущийЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, мРодитель, ГраницаЭлементаУправления.Центр);
			пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, мРодитель, ГраницаЭлементаУправления.Центр);
			пЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, мРодитель, ГраницаЭлементаУправления.Право);
		КонецЕсли;
	Иначе
		//при вертикальной всегда сбрасываем "Лево"
		пЭлемент.Верх = мВерхТекущий + мВысотаТекущий + мЗазор;
		пЭлемент.Лево = мЛевоБаза;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьГабарит(пЭлемент1, пЭлемент2 = Неопределено)
	
	_Результат = Новый Структура();
	Если пЭлемент2 = Неопределено Тогда
		_Результат.Вставить("Лево", пЭлемент1.Лево);
		_Результат.Вставить("Верх", пЭлемент1.Верх);
		_Результат.Вставить("Ширина", пЭлемент1.Ширина);
		_Результат.Вставить("Высота", пЭлемент1.Высота);
	Иначе
		_ЗазорГ = ?(пЭлемент1.Лево<пЭлемент2.Лево,пЭлемент2.Лево-пЭлемент1.Лево,пЭлемент1.Лево-пЭлемент2.Лево)-?(пЭлемент1.Лево<пЭлемент2.Лево,пЭлемент1.Ширина,пЭлемент2.Ширина);
		_ЗазорВ = ?(пЭлемент1.Верх<пЭлемент2.Верх,пЭлемент2.Верх-пЭлемент1.Верх,пЭлемент1.Верх-пЭлемент2.Верх)-?(пЭлемент1.Верх<пЭлемент2.Верх,пЭлемент1.Высота,пЭлемент2.Высота);
		_Результат.Вставить("Лево", Мин(пЭлемент1.Лево,пЭлемент2.Лево));
		_Результат.Вставить("Верх", Мин(пЭлемент1.Верх,пЭлемент2.Верх));
		_Результат.Вставить("Ширина", пЭлемент1.Ширина + пЭлемент2.Ширина + _ЗазорГ);
		_Результат.Вставить("Высота", пЭлемент1.Высота + пЭлемент2.Высота + _ЗазорВ);
	КонецЕсли;
	
	Возврат _Результат;
	
КонецФункции

Процедура МестоположениеЭлемента(пЭлемент1, пЭлемент2 = Неопределено)
	
	Если мГруппировка = "Горизонтально" Тогда
		_Габарит = ПолучитьГабарит(ПолучитьГабарит(мТекущийЭлемент, пЭлемент1), пЭлемент2);
	Иначе
		_Габарит = ПолучитьГабарит(пЭлемент1, пЭлемент2);
	КонецЕсли;
	
	мЛевоТекущий = _Габарит.Лево;
	мВерхТекущий = _Габарит.Верх;
	мШиринаТекущий = _Габарит.Ширина;
	мВысотаТекущий = _Габарит.Высота;
	
	Если пЭлемент2 = Неопределено Тогда
		мТекущийЭлемент = пЭлемент1;
	ИначеЕсли пЭлемент1.Лево >= пЭлемент2.Лево Тогда
		Если пЭлемент1.Верх >= пЭлемент2.Верх Тогда
			мТекущийЭлемент = пЭлемент1;
		Иначе
			мТекущийЭлемент = пЭлемент2;
		КонецЕсли;
	Иначе
		Если пЭлемент1.Верх >= пЭлемент2.Верх Тогда
			мТекущийЭлемент = пЭлемент1;
		Иначе
			мТекущийЭлемент = пЭлемент2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Дополнительно_ОбычноеПриложение

Функция ЭлементыФормы_Добавить(ИмяТипаЭлементаУправления, пИмя, пЗаголовок = Неопределено, пПрефикс = "")
	
	//если в имени нет префикса, добавим его
	_Имя = пИмя;
	
	_Группировка(_Имя);
	
	Если НЕ пПрефикс = "" И НЕ мПрефиксИмен = "" Тогда
		_Имя = ?(Найти(_Имя, мПрефиксИмен)=1, Сред(_Имя, СтрДлина(мПрефиксИмен)+1), _Имя);
		_Имя = ?(Найти(_Имя, пПрефикс)=1,     Сред(_Имя, СтрДлина(пПрефикс)+1),     _Имя);
		_Имя = мПрефиксИмен + пПрефикс + _Имя;
	ИначеЕсли пПрефикс = "" Тогда
		_Имя = ?(Найти(_Имя, мПрефиксИмен)<>1, мПрефиксИмен, "") + _Имя;
	ИначеЕсли мПрефиксИмен = "" Тогда
		_Имя = ?(Найти(_Имя, пПрефикс)<>1, пПрефикс, "") + _Имя;
	КонецЕсли;
	
	_НовыйЭлемент = мФорма.ЭлементыФормы.Найти(_Имя);
	
	Если _НовыйЭлемент = Неопределено Тогда
		_ТекущаяСтраница = мРодитель.ТекущаяСтраница;
		
		Если НЕ мРодитель.Страницы.Найти(мТекущаяСтраница) = Неопределено Тогда
			мРодитель.ТекущаяСтраница = мРодитель.Страницы[мТекущаяСтраница];
		КонецЕсли;
		
		Если ТипЗнч(мРодитель) = Тип("Панель") Тогда
			_НовыйЭлемент = мФорма.ЭлементыФормы.Добавить(Тип(ИмяТипаЭлементаУправления), _Имя, Истина, мРодитель);
		Иначе
			_НовыйЭлемент = мФорма.ЭлементыФормы.Добавить(Тип(ИмяТипаЭлементаУправления), _Имя, Истина);
		КонецЕсли;
		
		мРодитель.ТекущаяСтраница = _ТекущаяСтраница;
		
	КонецЕсли;
	
	_НовыйЭлемент.Ширина = мШирина;
	
	Если НЕ пЗаголовок = Неопределено Тогда
		_НовыйЭлемент.Заголовок = пЗаголовок;
	КонецЕсли;
	
	Попытка
		_НовыйЭлемент.ТолькоПросмотр = мФорма.ТолькоПросмотр;
	Исключение КонецПопытки;
	
	ПривязкаПоУмолчанию(_НовыйЭлемент);
	
	Возврат _НовыйЭлемент;
	
КонецФункции

Функция ПолучитьПанель(пПанель = Неопределено)
	
	Если ТипЗнч(пПанель) = Тип("Строка") Тогда
		_Панель = мФорма[пПанель];
		
	ИначеЕсли ТипЗнч(пПанель) = Тип("Панель") Тогда
		_Панель = пПанель;
		
	Иначе
		_Панель = мФорма.Панель;
		
	КонецЕсли;
	
	Возврат _Панель
	
КонецФункции

Функция ПолучитьВысотуНадписи(Текст, Шрифт, Ширина)
	
	ТабДок = мФорма.ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), ПолучитьУникальноеИмя(мПрефиксИмен), Истина);
	
	Надпись = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Надпись.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Надпись.АвтоРазмер = Истина;
	Надпись.Ширина = Ширина;
	Надпись.Шрифт = Шрифт;
	Надпись.Текст = Текст;
	Надпись.Расположить(ТабДок.Область(1,1,1,1));
	
	ТабДок.Показать();
	
	Высота = Надпись.Высота;
	
	мФорма.ЭлементыФормы.Удалить(ТабДок);
	
	Возврат Высота;
	
КонецФункции

#КонецОбласти

#Иначе

#Область Дополнительно_УП

Процедура СоздатьТаблицуЗначенийВРеквизитеФормы(ИмяРеквизитаФормы, ТаблицаЗначений)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	_Реквизиты = мФорма.ПолучитьРеквизиты(ИмяРеквизитаФормы);
	
	Для каждого _Реквизит Из _Реквизиты Цикл
		Если ТаблицаЗначений.Колонки.Найти(_Реквизит.Имя) = Неопределено Тогда
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизитаФормы+"."+_Реквизит.Имя);
			//Элементы.Удалить(Элементы[ИмяРеквизитаФормы].ПодчиненныеЭлементы.Найти(_Реквизит.Имя));
		КонецЕсли;
	КонецЦикла;
	
	_Реквизиты = мФорма.ПолучитьРеквизиты(ИмяРеквизитаФормы);
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Найден = Ложь;
		Для каждого _Реквизит Из _Реквизиты Цикл
			Если _Реквизит.Имя = Колонка.Имя Тогда Найден = Истина; Прервать; КонецЕсли;
		КонецЦикла;

		Если Найден = Ложь Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяРеквизитаФормы, Колонка.Имя));
		КонецЕсли;
		
	КонецЦикла;
	
	мФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	//Для каждого _Реквизит Из МассивДобавляемыхРеквизитов Цикл
	//	
	//	ПолеФормы = Элементы.Добавить(_Реквизит.Имя, Тип("ПолеФормы"), Элементы[ИмяРеквизитаФормы]);
	//	ПолеФормы.Заголовок = ПолеФормы.Имя; 
	//	ПолеФормы.ПутьКДанным = ИмяРеквизитаФормы +"."+_Реквизит.Имя; 
	//	ПолеФормы.Вид = ВидПоляФормы.ПолеНадписи;
	//	
	//КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
